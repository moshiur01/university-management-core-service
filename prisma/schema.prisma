// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  students   Student[]

  //*relation with semester registration
  semesterRegistration SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  //ref=> semester registration
  studentSemesterRegistrations StudentSemesterRegistration[]

  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  //faculty ref by courses
  courses CourseFaculty[]

  //relations with OfferedCourseClassSchedule
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  //relation with OfferedCourseClassSchedule
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")

  faculties      CourseFaculty[]
  offeredCourses OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
  @@map("course_prerequisites")
}

// Faculty(teacher) Assign for Specific Course model
model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id]) //ref field

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id]) //ref field

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                 String                      @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus? @default(UPCOMING)
  minimunCredit      Int                         @default(0)
  maximumCredit      Int                         @default(0)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  academicSemesterId String

  academcSemester             AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  offeredCourses              OfferedCourse[]
  offeredCourseSections       OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  studentSemesterRegistrations StudentSemesterRegistration[]

  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

//*offerer courses
model OfferedCourse {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  academicDepertmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepertmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

//*offerer courses section

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId String
  offerredCourse  OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  //relation with OfferedCourseClassSchedule
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

//* offered Course class schedule

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek Weekdays @default(SATURDAY)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //*reference fields
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterREegistration  SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offfered_course_class_schedule")
}

enum Weekdays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}

//*student semester registration
model StudentSemesterRegistration {
  id               String   @id @default(uuid())
  isConfirmed      Boolean? @default(false)
  totalCreditTaken Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  //ref

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  semesterRegistrationId String
  semesterRegistraion    SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registration")
}

//*student semester registrarion course
model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  offeredCourseId String
  offererCourse   OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId]) //make custom id 
  @@map("student_semester_registration_courses")
}
